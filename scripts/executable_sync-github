#!/usr/bin/env bash
set -euo pipefail

usage() {
	cat <<'EOF'
Usage:
  sync-github (--user <username> | --org <org>) --dest <path> [options]

Options:
  --user <username>         Sync repos for this user.
  --org <org>               Sync repos for this organization.
  --dest <path>             Destination directory for clones.
  --https                   Use HTTPS instead of SSH (default SSH).
  --mirror                  Use bare mirrored clones (<name>.git).
  --include-archived        Include archived repositories (default: skip).
  --include-forks           Include forked repositories (default: skip).
  --concurrency <N>         Parallel jobs (default: 4).
  --dry-run                 Show actions only.
  --help                    Show help.
EOF
	exit "${1:-0}"
}

SUBJECT_TYPE=""
SUBJECT_NAME=""
DEST=""
USE_HTTPS="false"
MIRROR="false"
INCLUDE_ARCHIVED="false"
INCLUDE_FORKS="false"
CONCURRENCY=4
DRY_RUN="false"

while [[ $# -gt 0 ]]; do
	case "$1" in
	--user)
		SUBJECT_TYPE="user"
		SUBJECT_NAME="${2:?}"
		shift 2
		;;
	--org)
		SUBJECT_TYPE="org"
		SUBJECT_NAME="${2:?}"
		shift 2
		;;
	--dest)
		DEST="${2:?}"
		shift 2
		;;
	--https)
		USE_HTTPS="true"
		shift
		;;
	--mirror)
		MIRROR="true"
		shift
		;;
	--include-archived)
		INCLUDE_ARCHIVED="true"
		shift
		;;
	--include-forks)
		INCLUDE_FORKS="true"
		shift
		;;
	--concurrency)
		CONCURRENCY="${2:?}"
		shift 2
		;;
	--dry-run)
		DRY_RUN="true"
		shift
		;;
	--help | -h) usage 0 ;;
	*)
		echo "Unknown argument: $1"
		usage 1
		;;
	esac
done

[[ -z "$SUBJECT_TYPE" || -z "$SUBJECT_NAME" ]] && {
	echo "Error: --user or --org must be provided."
	usage 1
}
[[ -z "$DEST" ]] && {
	echo "Error: --dest <path> is required."
	usage 1
}

command -v gh >/dev/null || {
	echo "Error: gh not found."
	exit 1
}
command -v git >/dev/null || {
	echo "Error: git not found."
	exit 1
}
command -v jq >/dev/null || {
	echo "Error: jq not found."
	exit 1
}
gh auth status >/dev/null || {
	echo "Error: gh not authenticated. Run: gh auth login"
	exit 1
}

mkdir -p "$DEST"

echo ">> Listing repositories for $SUBJECT_TYPE: $SUBJECT_NAME ..."
REPOS_JSON=$(gh repo list "$SUBJECT_NAME" --limit 1000 \
	--json name,sshUrl,url,isArchived,isFork,visibility 2>/dev/null)

[[ -z "${REPOS_JSON:-}" || "$REPOS_JSON" == "null" ]] && {
	echo "No repositories found."
	exit 1
}

URL_FIELD=".sshUrl"
[[ "$USE_HTTPS" == "true" ]] && URL_FIELD=".url"

FILTERED=$(echo "$REPOS_JSON" | jq -r '
  map(
    select(('"$INCLUDE_ARCHIVED"' or (.isArchived|not)))
    | select(('"$INCLUDE_FORKS"' or (.isFork|not)))
  )
  | map({name, url: ('"$URL_FIELD"'), visibility})
')

COUNT=$(echo "$FILTERED" | jq 'length')
echo ">> Repositories to sync: $COUNT (https="\"$USE_HTTPS\"" , mirror="\"$MIRROR\"" , include_archived="\"$INCLUDE_ARCHIVED\"" , include_forks="\"$INCLUDE_FORKS\"" )"
[[ "$COUNT" -eq 0 ]] && {
	echo "Nothing to do."
	exit 0
}

LIST_FILE="$(mktemp)"
# NUL-delimited triplets: name \t url \t visibility \0
echo "$FILTERED" | jq -r '.[] | [.name, .url, .visibility] | @tsv + "\u0000"' >"$LIST_FILE"

sync_one_regular() {
	local name="$1" url="$2" target="$3"
	if [[ ! -d "$target/.git" ]]; then
		echo "  + Cloning $name -> $target"
		git clone "$url" "$target"
	else
		echo "  ~ Updating $name in $target"
		git -C "$target" remote set-url origin "$url" || true
		git -C "$target" fetch --all --prune
		if git -C "$target" rev-parse --abbrev-ref --symbolic-full-name '@{u}' >/dev/null 2>&1; then
			git -C "$target" pull --ff-only
		else
			echo "    (No upstream tracking branch; fetched only)"
		fi
	fi
}

sync_one_mirror() {
	local name="$1" url="$2" target="$3" # target ends with .git
	if [[ ! -d "$target" ]]; then
		echo "  + Mirroring $name -> $target"
		git clone --mirror "$url" "$target"
	else
		echo "  ~ Updating mirror $name in $target"
		git -C "$target" remote set-url origin "$url" || true
		git -C "$target" remote update --prune
	fi
}

worker() {
	local name="$1" url="$2" visibility="$3"
	local target
	if [[ "$MIRROR" == "true" ]]; then
		target="$DEST/${name}.git"
	else
		target="$DEST/${name}"
	fi
	echo ">> [$visibility] $name"
	if [[ "$DRY_RUN" == "true" ]]; then
		[[ "$MIRROR" == "true" ]] && echo "    would: mirror clone/update $url -> $target" || echo "    would: clone/update $url -> $target"
		return 0
	fi
	if [[ -z "$url" ]]; then
		echo "    !! Skipping $name (empty URL)"
		return 0
	fi
	if [[ "$MIRROR" == "true" ]]; then
		sync_one_mirror "$name" "$url" "$target"
	else
		sync_one_regular "$name" "$url" "$target"
	fi
}

export -f sync_one_regular sync_one_mirror worker
export DEST MIRROR DRY_RUN

echo ">> Starting sync with concurrency=$CONCURRENCY ..."
# Read NUL-delimited records; pass 3 args (name url visibility) to worker
xargs -0 -n3 -P "$CONCURRENCY" bash -c 'worker "$1" "$2" "$3"' _ <"$LIST_FILE"

rm -f "$LIST_FILE"
echo ">> Done."
